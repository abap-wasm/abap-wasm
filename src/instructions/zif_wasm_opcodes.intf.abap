INTERFACE zif_wasm_opcodes PUBLIC.

  TYPES ty_opcode TYPE x LENGTH 1.
  TYPES ty_opcodei TYPE int8.

  CONSTANTS:
      BEGIN OF c_opcodes,
* https://webassembly.github.io/spec/core/binary/instructions.html#control-instructions
        unreachable   TYPE ty_opcode VALUE '00',
        nop           TYPE ty_opcode VALUE '01',
        block         TYPE ty_opcode VALUE '02',
        loop          TYPE ty_opcode VALUE '03',
        if_           TYPE ty_opcode VALUE '04',
        else_         TYPE ty_opcode VALUE '05',
        end           TYPE ty_opcode VALUE '0B',
        br            TYPE ty_opcode VALUE '0C',
        br_if         TYPE ty_opcode VALUE '0D',
        br_table      TYPE ty_opcode VALUE '0E',
        return_       TYPE ty_opcode VALUE '0F',
        call          TYPE ty_opcode VALUE '10',
        call_indirect TYPE ty_opcode VALUE '11',
* https://webassembly.github.io/spec/core/binary/instructions.html#parametric-instructions
        drop          TYPE ty_opcode VALUE '1A',
        select        TYPE ty_opcode VALUE '1B',
        select_star   TYPE ty_opcode VALUE '1C',
* https://webassembly.github.io/spec/core/binary/instructions.html#variable-instructions
        local_get     TYPE ty_opcode VALUE '20',
        local_set     TYPE ty_opcode VALUE '21',
        local_tee     TYPE ty_opcode VALUE '22',
        global_get    TYPE ty_opcode VALUE '23',
        global_set    TYPE ty_opcode VALUE '24',
        table_get     TYPE ty_opcode VALUE '25',
        table_set     TYPE ty_opcode VALUE '26',
        i32_load       TYPE ty_opcode VALUE '28',
        i64_load       TYPE ty_opcode VALUE '29',
        f32_load       TYPE ty_opcode VALUE '2A',
        f64_load       TYPE ty_opcode VALUE '2B',
        i32_load8_s    TYPE ty_opcode VALUE '2C',
        i32_load8_u    TYPE ty_opcode VALUE '2D',
        i32_load16_s   TYPE ty_opcode VALUE '2E',
        i32_load16_u   TYPE ty_opcode VALUE '2F',
        i64_load8_s    TYPE ty_opcode VALUE '30',
        i64_load8_u    TYPE ty_opcode VALUE '31',
        i64_load16_s   TYPE ty_opcode VALUE '32',
        i64_load16_u   TYPE ty_opcode VALUE '33',
        i64_load32_s   TYPE ty_opcode VALUE '34',
        i64_load32_u   TYPE ty_opcode VALUE '35',
        i32_store      TYPE ty_opcode VALUE '36',
        i64_store      TYPE ty_opcode VALUE '37',
        f32_store      TYPE ty_opcode VALUE '38',
        f64_store      TYPE ty_opcode VALUE '39',
        i32_store8     TYPE ty_opcode VALUE '3A',
        i32_store16    TYPE ty_opcode VALUE '3B',
        i64_store8     TYPE ty_opcode VALUE '3C',
        i64_store16    TYPE ty_opcode VALUE '3D',
        i64_store32    TYPE ty_opcode VALUE '3E',
        memory_size    TYPE ty_opcode VALUE '3F',
        memory_grow    TYPE ty_opcode VALUE '40',
* https://webassembly.github.io/spec/core/binary/instructions.html#numeric-instructions
        i32_const      TYPE ty_opcode VALUE '41',
        i64_const      TYPE ty_opcode VALUE '42',
        f32_const      TYPE ty_opcode VALUE '43',
        f64_const      TYPE ty_opcode VALUE '44',
        i32_eqz        TYPE ty_opcode VALUE '45',
        i32_eq         TYPE ty_opcode VALUE '46',
        i32_ne         TYPE ty_opcode VALUE '47',
        i32_lt_s       TYPE ty_opcode VALUE '48',
        i32_lt_u       TYPE ty_opcode VALUE '49',
        i32_gt_s       TYPE ty_opcode VALUE '4A',
        i32_gt_u       TYPE ty_opcode VALUE '4B',
        i32_le_s       TYPE ty_opcode VALUE '4C',
        i32_le_u       TYPE ty_opcode VALUE '4D',
        i32_ge_s       TYPE ty_opcode VALUE '4E',
        i32_ge_u       TYPE ty_opcode VALUE '4F',
        i64_eqz        TYPE ty_opcode VALUE '50',
        i64_eq         TYPE ty_opcode VALUE '51',
        i64_ne         TYPE ty_opcode VALUE '52',
        i64_lt_s       TYPE ty_opcode VALUE '53',
        i64_lt_u       TYPE ty_opcode VALUE '54',
        i64_gt_s       TYPE ty_opcode VALUE '55',
        i64_gt_u       TYPE ty_opcode VALUE '56',
        i64_le_s       TYPE ty_opcode VALUE '57',
        i64_le_u       TYPE ty_opcode VALUE '58',
        i64_ge_s       TYPE ty_opcode VALUE '59',
        i64_ge_u       TYPE ty_opcode VALUE '5A',
        f32_eq         TYPE ty_opcode VALUE '5B',
        f32_ne         TYPE ty_opcode VALUE '5C',
        f32_lt         TYPE ty_opcode VALUE '5D',
        f32_gt         TYPE ty_opcode VALUE '5E',
        f32_le         TYPE ty_opcode VALUE '5F',
        f32_ge         TYPE ty_opcode VALUE '60',
        f64_eq         TYPE ty_opcode VALUE '61',
        f64_ne         TYPE ty_opcode VALUE '62',
        f64_lt         TYPE ty_opcode VALUE '63',
        f64_gt         TYPE ty_opcode VALUE '64',
        f64_le         TYPE ty_opcode VALUE '65',
        f64_ge         TYPE ty_opcode VALUE '66',
        i32_clz        TYPE ty_opcode VALUE '67',
        i32_ctz        TYPE ty_opcode VALUE '68',
        i32_popcnt     TYPE ty_opcode VALUE '69',
        i32_add        TYPE ty_opcode VALUE '6A',
        i32_sub        TYPE ty_opcode VALUE '6B',
        i32_mul        TYPE ty_opcode VALUE '6C',
        i32_div_s      TYPE ty_opcode VALUE '6D',
        i32_div_u      TYPE ty_opcode VALUE '6E',
        i32_rem_s      TYPE ty_opcode VALUE '6F',
        i32_rem_u      TYPE ty_opcode VALUE '70',
        i32_and        TYPE ty_opcode VALUE '71',
        i32_or         TYPE ty_opcode VALUE '72',
        i32_xor        TYPE ty_opcode VALUE '73',
        i32_shl        TYPE ty_opcode VALUE '74',
        i32_shr_s      TYPE ty_opcode VALUE '75',
        i32_shr_u      TYPE ty_opcode VALUE '76',
        i32_rotl       TYPE ty_opcode VALUE '77',
        i32_rotr       TYPE ty_opcode VALUE '78',
        i64_clz        TYPE ty_opcode VALUE '79',
        i64_ctz        TYPE ty_opcode VALUE '7A',
        i64_popcnt     TYPE ty_opcode VALUE '7B',
        i64_add        TYPE ty_opcode VALUE '7C',
        i64_sub        TYPE ty_opcode VALUE '7D',
        i64_mul        TYPE ty_opcode VALUE '7E',
        i64_div_s      TYPE ty_opcode VALUE '7F',
        i64_div_u      TYPE ty_opcode VALUE '80',
        i64_rem_s      TYPE ty_opcode VALUE '81',
        i64_rem_u      TYPE ty_opcode VALUE '82',
        i64_and        TYPE ty_opcode VALUE '83',
        i64_or         TYPE ty_opcode VALUE '84',
        i64_xor        TYPE ty_opcode VALUE '85',
        i64_shl        TYPE ty_opcode VALUE '86',
        i64_shr_s      TYPE ty_opcode VALUE '87',
        i64_shr_u      TYPE ty_opcode VALUE '88',
        i64_rotl       TYPE ty_opcode VALUE '89',
        i64_rotr       TYPE ty_opcode VALUE '8A',
        f32_abs        TYPE ty_opcode VALUE '8B',
        f32_neg        TYPE ty_opcode VALUE '8C',
        f32_ceil       TYPE ty_opcode VALUE '8D',
        f32_floor      TYPE ty_opcode VALUE '8E',
        f32_trunc      TYPE ty_opcode VALUE '8F',
        f32_nearest    TYPE ty_opcode VALUE '90',
        f32_sqrt       TYPE ty_opcode VALUE '91',
        f32_add        TYPE ty_opcode VALUE '92',
        f32_sub        TYPE ty_opcode VALUE '93',
        f32_mul        TYPE ty_opcode VALUE '94',
        f32_div        TYPE ty_opcode VALUE '95',
        f32_min        TYPE ty_opcode VALUE '96',
        f32_max        TYPE ty_opcode VALUE '97',
        f32_copysign   TYPE ty_opcode VALUE '98',
        f64_abs        TYPE ty_opcode VALUE '99',
        f64_neg        TYPE ty_opcode VALUE '9A',
        f64_ceil       TYPE ty_opcode VALUE '9B',
        f64_floor      TYPE ty_opcode VALUE '9C',
        f64_trunc      TYPE ty_opcode VALUE '9D',
        f64_nearest    TYPE ty_opcode VALUE '9E',
        f64_sqrt       TYPE ty_opcode VALUE '9F',
        f64_add        TYPE ty_opcode VALUE 'A0',
        f64_sub        TYPE ty_opcode VALUE 'A1',
        f64_mul        TYPE ty_opcode VALUE 'A2',
        f64_div        TYPE ty_opcode VALUE 'A3',
        f64_min        TYPE ty_opcode VALUE 'A4',
        f64_max        TYPE ty_opcode VALUE 'A5',
        f64_copysign   TYPE ty_opcode VALUE 'A6',
        i32_wrap_i64        TYPE ty_opcode VALUE 'A7',
        i32_trunc_f32_s     TYPE ty_opcode VALUE 'A8',
        i32_trunc_f32_u     TYPE ty_opcode VALUE 'A9',
        i32_trunc_f64_s     TYPE ty_opcode VALUE 'AA',
        i32_trunc_f64_u     TYPE ty_opcode VALUE 'AB',
        i64_extend_i32_s    TYPE ty_opcode VALUE 'AC',
        i64_extend_i32_u    TYPE ty_opcode VALUE 'AD',
        i64_trunc_f32_s     TYPE ty_opcode VALUE 'AE',
        i64_trunc_f32_u     TYPE ty_opcode VALUE 'AF',
        i64_trunc_f64_s     TYPE ty_opcode VALUE 'B0',
        i64_trunc_f64_u     TYPE ty_opcode VALUE 'B1',
        f32_convert_i32_s   TYPE ty_opcode VALUE 'B2',
        f32_convert_i32_u   TYPE ty_opcode VALUE 'B3',
        f32_convert_i64_s   TYPE ty_opcode VALUE 'B4',
        f32_convert_i64_u   TYPE ty_opcode VALUE 'B5',
        f32_demote_f64      TYPE ty_opcode VALUE 'B6',
        f64_convert_i32_s   TYPE ty_opcode VALUE 'B7',
        f64_convert_i32_u   TYPE ty_opcode VALUE 'B8',
        f64_convert_i64_s   TYPE ty_opcode VALUE 'B9',
        f64_convert_i64_u   TYPE ty_opcode VALUE 'BA',
        f64_promote_f32     TYPE ty_opcode VALUE 'BB',
        i32_reinterpret_f32 TYPE ty_opcode VALUE 'BC',
        i64_reinterpret_f64 TYPE ty_opcode VALUE 'BD',
        f32_reinterpret_i32 TYPE ty_opcode VALUE 'BE',
        f64_reinterpret_i64 TYPE ty_opcode VALUE 'BF',
        i32_extend8_s       TYPE ty_opcode VALUE 'C0',
        i32_extend16_s      TYPE ty_opcode VALUE 'C1',
        i64_extend8_s       TYPE ty_opcode VALUE 'C2',
        i64_extend16_s      TYPE ty_opcode VALUE 'C3',
        i64_extend32_s      TYPE ty_opcode VALUE 'C4',
        ref_null            TYPE ty_opcode VALUE 'D0',
        ref_is_null         TYPE ty_opcode VALUE 'D1',
        ref_func            TYPE ty_opcode VALUE 'D2',
        END OF c_opcodes.

* FB prefixed is Garbage Collection Proposal + Reference-Typed Strings
* status = propsal

* FD prefixed is SIMD
  CONSTANTS: BEGIN OF c_fd_opcodes,
               v128_load TYPE ty_opcode VALUE '00',
               v128_load8x8_s TYPE ty_opcode VALUE '01',
               v128_load8x8_u TYPE ty_opcode VALUE '02',
               v128_load16x4_s TYPE ty_opcode VALUE '03',
               v128_load16x4_u TYPE ty_opcode VALUE '04',
               v128_load32x2_s TYPE ty_opcode VALUE '05',
               v128_load32x2_u TYPE ty_opcode VALUE '06',
               v128_load8_splat TYPE ty_opcode VALUE '07',
               v128_load16_splat TYPE ty_opcode VALUE '08',
               v128_load32_splat TYPE ty_opcode VALUE '09',
               v128_load64_splat TYPE ty_opcode VALUE '0A',
               v128_store TYPE ty_opcode VALUE '0B',
               v128_const TYPE ty_opcode VALUE '0C',
               i8x16_shuffle TYPE ty_opcode VALUE '0D',
               i8x16_swizzle TYPE ty_opcode VALUE '0E',
               i8x16_splat TYPE ty_opcode VALUE '0F',
               i16x8_splat TYPE ty_opcode VALUE '10',
               i32x4_splat TYPE ty_opcode VALUE '11',
               i64x2_splat TYPE ty_opcode VALUE '12',
               f32x4_splat TYPE ty_opcode VALUE '13',
               f64x2_splat TYPE ty_opcode VALUE '14',
               i8x16_extract_lane_s TYPE ty_opcode VALUE '15',
               i8x16_extract_lane_u TYPE ty_opcode VALUE '16',
               i8x16_replace_lane TYPE ty_opcode VALUE '17',
               i16x8_extract_lane_s TYPE ty_opcode VALUE '18',
               i16x8_extract_lane_u TYPE ty_opcode VALUE '19',
               i16x8_replace_lane TYPE ty_opcode VALUE '1A',
               i32x4_extract_lane TYPE ty_opcode VALUE '1B',
               i32x4_replace_lane TYPE ty_opcode VALUE '1C',
               i64x2_extract_lane TYPE ty_opcode VALUE '1D',
               i64x2_replace_lane TYPE ty_opcode VALUE '1E',
               f32x4_extract_lane TYPE ty_opcode VALUE '1F',
               f32x4_replace_lane TYPE ty_opcode VALUE '20',
               f64x2_extract_lane TYPE ty_opcode VALUE '21',
               f64x2_replace_lane TYPE ty_opcode VALUE '22',
               i8x16_eq TYPE ty_opcode VALUE '23',
               i16x8_eq TYPE ty_opcode VALUE '2D',
               i32x4_eq TYPE ty_opcode VALUE '37',
               i8x16_ne TYPE ty_opcode VALUE '24',
               i16x8_ne TYPE ty_opcode VALUE '2E',
               i32x4_ne TYPE ty_opcode VALUE '38',
               i8x16_lt_s TYPE ty_opcode VALUE '25',
               i16x8_lt_s TYPE ty_opcode VALUE '2F',
               i32x4_lt_s TYPE ty_opcode VALUE '39',
               i8x16_lt_u TYPE ty_opcode VALUE '26',
               i16x8_lt_u TYPE ty_opcode VALUE '30',
               i32x4_lt_u TYPE ty_opcode VALUE '3A',
               i8x16_gt_s TYPE ty_opcode VALUE '27',
               i16x8_gt_s TYPE ty_opcode VALUE '31',
               i32x4_gt_s TYPE ty_opcode VALUE '3B',
               i8x16_gt_u TYPE ty_opcode VALUE '28',
               i16x8_gt_u TYPE ty_opcode VALUE '32',
               i32x4_gt_u TYPE ty_opcode VALUE '3C',
               i8x16_le_s TYPE ty_opcode VALUE '29',
               i16x8_le_s TYPE ty_opcode VALUE '33',
               i32x4_le_s TYPE ty_opcode VALUE '3D',
               i8x16_le_u TYPE ty_opcode VALUE '2A',
               i16x8_le_u TYPE ty_opcode VALUE '34',
               i32x4_le_u TYPE ty_opcode VALUE '3E',
               i8x16_ge_s TYPE ty_opcode VALUE '2B',
               i16x8_ge_s TYPE ty_opcode VALUE '35',
               i32x4_ge_s TYPE ty_opcode VALUE '3F',
               i8x16_ge_u TYPE ty_opcode VALUE '2C',
               i16x8_ge_u TYPE ty_opcode VALUE '36',
               i32x4_ge_u TYPE ty_opcode VALUE '40',
               f32x4_eq TYPE ty_opcode VALUE '41',
               f64x2_eq TYPE ty_opcode VALUE '47',
               f32x4_ne TYPE ty_opcode VALUE '42',
               f64x2_ne TYPE ty_opcode VALUE '48',
               f32x4_lt TYPE ty_opcode VALUE '43',
               f64x2_lt TYPE ty_opcode VALUE '49',
               f32x4_gt TYPE ty_opcode VALUE '44',
               f64x2_gt TYPE ty_opcode VALUE '4A',
               f32x4_le TYPE ty_opcode VALUE '45',
               f64x2_le TYPE ty_opcode VALUE '4B',
               f32x4_ge TYPE ty_opcode VALUE '46',
               f64x2_ge TYPE ty_opcode VALUE '4C',
               v128_not TYPE ty_opcode VALUE '4D',
               v128_and TYPE ty_opcode VALUE '4E',
               v128_andnot TYPE ty_opcode VALUE '4F',
               v128_or TYPE ty_opcode VALUE '50',
               v128_xor TYPE ty_opcode VALUE '51',
               v128_bitselect TYPE ty_opcode VALUE '52',
               v128_any_true TYPE ty_opcode VALUE '53',
               v128_load8_lane TYPE ty_opcode VALUE '54',
               v128_load16_lane TYPE ty_opcode VALUE '55',
               v128_load32_lane TYPE ty_opcode VALUE '56',
               v128_load64_lane TYPE ty_opcode VALUE '57',
               v128_store8_lane TYPE ty_opcode VALUE '58',
               v128_store16_lane TYPE ty_opcode VALUE '59',
               v128_store32_lane TYPE ty_opcode VALUE '5A',
               v128_store64_lane TYPE ty_opcode VALUE '5B',
               v128_load32_zero TYPE ty_opcode VALUE '5C',
               v128_load64_zero TYPE ty_opcode VALUE '5D',
               f32x4_demote_f64x2_zero TYPE ty_opcode VALUE '5E',
               f64x2_promote_low_f32x4 TYPE ty_opcode VALUE '5F',
               i8x16_abs TYPE ty_opcode VALUE '60',
               i16x8_abs TYPE ty_opcode VALUE '80',
               i32x4_abs TYPE ty_opcode VALUE 'A0',
               i64x2_abs TYPE ty_opcode VALUE 'C0',
               i8x16_neg TYPE ty_opcode VALUE '61',
               i16x8_neg TYPE ty_opcode VALUE '81',
               i32x4_neg TYPE ty_opcode VALUE 'A1',
               i64x2_neg TYPE ty_opcode VALUE 'C1',
               i8x16_popcnt TYPE ty_opcode VALUE '62',
               i16x8_q15mulr_sat_s TYPE ty_opcode VALUE '82',
               i8x16_all_true TYPE ty_opcode VALUE '63',
               i16x8_all_true TYPE ty_opcode VALUE '83',
               i32x4_all_true TYPE ty_opcode VALUE 'A3',
               i64x2_all_true TYPE ty_opcode VALUE 'C3',
               i8x16_bitmask TYPE ty_opcode VALUE '64',
               i16x8_bitmask TYPE ty_opcode VALUE '84',
               i32x4_bitmask TYPE ty_opcode VALUE 'A4',
               i64x2_bitmask TYPE ty_opcode VALUE 'C4',
               i8x16_narrow_i16x8_s TYPE ty_opcode VALUE '65',
               i16x8_narrow_i32x4_s TYPE ty_opcode VALUE '85',
               i8x16_narrow_i16x8_u TYPE ty_opcode VALUE '66',
               i16x8_narrow_i32x4_u TYPE ty_opcode VALUE '86',
               f32x4_ceil TYPE ty_opcode VALUE '67',
               i16x8_extend_low_i8x16_s TYPE ty_opcode VALUE '87',
               i32x4_extend_low_i16x8_s TYPE ty_opcode VALUE 'A7',
               i64x2_extend_low_i32x4_s TYPE ty_opcode VALUE 'C7',
               f32x4_floor TYPE ty_opcode VALUE '68',
               i16x8_extend_high_i8x16_s TYPE ty_opcode VALUE '88',
               i32x4_extend_high_i16x8_s TYPE ty_opcode VALUE 'A8',
               i64x2_extend_high_i32x4_s TYPE ty_opcode VALUE 'C8',
               f32x4_trunc TYPE ty_opcode VALUE '69',
               i16x8_extend_low_i8x16_u TYPE ty_opcode VALUE '89',
               i32x4_extend_low_i16x8_u TYPE ty_opcode VALUE 'A9',
               i64x2_extend_low_i32x4_u TYPE ty_opcode VALUE 'C9',
               f32x4_nearest TYPE ty_opcode VALUE '6A',
               i16x8_extend_high_i8x16_u TYPE ty_opcode VALUE '8A',
               i32x4_extend_high_i16x8_u TYPE ty_opcode VALUE 'AA',
               i64x2_extend_high_i32x4_u TYPE ty_opcode VALUE 'CA',
               i8x16_shl TYPE ty_opcode VALUE '6B',
               i16x8_shl TYPE ty_opcode VALUE '8B',
               i32x4_shl TYPE ty_opcode VALUE 'AB',
               i64x2_shl TYPE ty_opcode VALUE 'CB',
               i8x16_shr_s TYPE ty_opcode VALUE '6C',
               i16x8_shr_s TYPE ty_opcode VALUE '8C',
               i32x4_shr_s TYPE ty_opcode VALUE 'AC',
               i64x2_shr_s TYPE ty_opcode VALUE 'CC',
               i8x16_shr_u TYPE ty_opcode VALUE '6D',
               i16x8_shr_u TYPE ty_opcode VALUE '8D',
               i32x4_shr_u TYPE ty_opcode VALUE 'AD',
               i64x2_shr_u TYPE ty_opcode VALUE 'CD',
               i8x16_add TYPE ty_opcode VALUE '6E',
               i16x8_add TYPE ty_opcode VALUE '8E',
               i32x4_add TYPE ty_opcode VALUE 'AE',
               i64x2_add TYPE ty_opcode VALUE 'CE',
               i8x16_add_sat_s TYPE ty_opcode VALUE '6F',
               i16x8_add_sat_s TYPE ty_opcode VALUE '8F',
               i8x16_add_sat_u TYPE ty_opcode VALUE '70',
               i16x8_add_sat_u TYPE ty_opcode VALUE '90',
               i8x16_sub TYPE ty_opcode VALUE '71',
               i16x8_sub TYPE ty_opcode VALUE '91',
               i32x4_sub TYPE ty_opcode VALUE 'B1',
               i64x2_sub TYPE ty_opcode VALUE 'D1',
               i8x16_sub_sat_s TYPE ty_opcode VALUE '72',
               i16x8_sub_sat_s TYPE ty_opcode VALUE '92',
               i8x16_sub_sat_u TYPE ty_opcode VALUE '73',
               i16x8_sub_sat_u TYPE ty_opcode VALUE '93',
               f64x2_ceil TYPE ty_opcode VALUE '74',
               f64x2_nearest TYPE ty_opcode VALUE '94',
               f64x2_floor TYPE ty_opcode VALUE '75',
               i16x8_mul TYPE ty_opcode VALUE '95',
               i32x4_mul TYPE ty_opcode VALUE 'B5',
               i64x2_mul TYPE ty_opcode VALUE 'D5',
               i8x16_min_s TYPE ty_opcode VALUE '76',
               i16x8_min_s TYPE ty_opcode VALUE '96',
               i32x4_min_s TYPE ty_opcode VALUE 'B6',
               i64x2_eq TYPE ty_opcode VALUE 'D6',
               i8x16_min_u TYPE ty_opcode VALUE '77',
               i16x8_min_u TYPE ty_opcode VALUE '97',
               i32x4_min_u TYPE ty_opcode VALUE 'B7',
               i64x2_ne TYPE ty_opcode VALUE 'D7',
               i8x16_max_s TYPE ty_opcode VALUE '78',
               i16x8_max_s TYPE ty_opcode VALUE '98',
               i32x4_max_s TYPE ty_opcode VALUE 'B8',
               i64x2_lt_s TYPE ty_opcode VALUE 'D8',
               i8x16_max_u TYPE ty_opcode VALUE '79',
               i16x8_max_u TYPE ty_opcode VALUE '99',
               i32x4_max_u TYPE ty_opcode VALUE 'B9',
               i64x2_gt_s TYPE ty_opcode VALUE 'D9',
               f64x2_trunc TYPE ty_opcode VALUE '7A',
               i32x4_dot_i16x8_s TYPE ty_opcode VALUE 'BA',
               i64x2_le_s TYPE ty_opcode VALUE 'DA',
               i8x16_avgr_u TYPE ty_opcode VALUE '7B',
               i16x8_avgr_u TYPE ty_opcode VALUE '9B',
               i64x2_ge_s TYPE ty_opcode VALUE 'DB',
               i16x8_extadd_pairwise_i8x16_s TYPE ty_opcode VALUE '7C',
               i16x8_extmul_low_i8x16_s TYPE ty_opcode VALUE '9C',
               i32x4_extmul_low_i16x8_s TYPE ty_opcode VALUE 'BC',
               i64x2_extmul_low_i32x4_s TYPE ty_opcode VALUE 'DC',
               i16x8_extadd_pairwise_i8x16_u TYPE ty_opcode VALUE '7D',
               i16x8_extmul_high_i8x16_s TYPE ty_opcode VALUE '9D',
               i32x4_extmul_high_i16x8_s TYPE ty_opcode VALUE 'BD',
               i64x2_extmul_high_i32x4_s TYPE ty_opcode VALUE 'DD',
               i32x4_extadd_pairwise_i16x8_s TYPE ty_opcode VALUE '7E',
               i16x8_extmul_low_i8x16_u TYPE ty_opcode VALUE '9E',
               i32x4_extmul_low_i16x8_u TYPE ty_opcode VALUE 'BE',
               i64x2_extmul_low_i32x4_u TYPE ty_opcode VALUE 'DE',
               i32x4_extadd_pairwise_i16x8_u TYPE ty_opcode VALUE '7F',
               i16x8_extmul_high_i8x16_u TYPE ty_opcode VALUE '9F',
               i32x4_extmul_high_i16x8_u TYPE ty_opcode VALUE 'BF',
               i64x2_extmul_high_i32x4_u TYPE ty_opcode VALUE 'DF',
               f32x4_abs TYPE ty_opcode VALUE 'E0',
               f64x2_abs TYPE ty_opcode VALUE 'EC',
               f32x4_neg TYPE ty_opcode VALUE 'E1',
               f64x2_neg TYPE ty_opcode VALUE 'ED',
               f32x4_sqrt TYPE ty_opcode VALUE 'E3',
               f64x2_sqrt TYPE ty_opcode VALUE 'EF',
               f32x4_add TYPE ty_opcode VALUE 'E4',
               f64x2_add TYPE ty_opcode VALUE 'F0',
               f32x4_sub TYPE ty_opcode VALUE 'E5',
               f64x2_sub TYPE ty_opcode VALUE 'F1',
               f32x4_mul TYPE ty_opcode VALUE 'E6',
               f64x2_mul TYPE ty_opcode VALUE 'F2',
               f32x4_div TYPE ty_opcode VALUE 'E7',
               f64x2_div TYPE ty_opcode VALUE 'F3',
               f32x4_min TYPE ty_opcode VALUE 'E8',
               f64x2_min TYPE ty_opcode VALUE 'F4',
               f32x4_max TYPE ty_opcode VALUE 'E9',
               f64x2_max TYPE ty_opcode VALUE 'F5',
               f32x4_pmin TYPE ty_opcode VALUE 'EA',
               f64x2_pmin TYPE ty_opcode VALUE 'F6',
               f32x4_pmax TYPE ty_opcode VALUE 'EB',
               f64x2_pmax TYPE ty_opcode VALUE 'F7',
               i32x4_trunc_sat_f32x4_s TYPE ty_opcode VALUE 'F8',
               i32x4_trunc_sat_f32x4_u TYPE ty_opcode VALUE 'F9',
               f32x4_convert_i32x4_s TYPE ty_opcode VALUE 'FA',
               f32x4_convert_i32x4_u TYPE ty_opcode VALUE 'FB',
               i32x4_trunc_sat_f64x2_s_zero TYPE ty_opcode VALUE 'C,',
               i32x4_trunc_sat_f64x2_u_zero TYPE ty_opcode VALUE 'D,',
               f64x2_convert_low_i32x4_s TYPE ty_opcode VALUE 'FE',
               f64x2_convert_low_i32x4_u TYPE ty_opcode VALUE 'FF',
             END OF c_fd_opcodes.

* FC opcodes,
  CONSTANTS: BEGIN OF c_fc_opcodes,
               i32_trunc_sat_f32_s TYPE ty_opcodei VALUE 0,
               i32_trunc_sat_f32_u TYPE ty_opcodei VALUE 1,
               i32_trunc_sat_f64_s TYPE ty_opcodei VALUE 2,
               i32_trunc_sat_f64_u TYPE ty_opcodei VALUE 3,
               i64_trunc_sat_f32_s TYPE ty_opcodei VALUE 4,
               i64_trunc_sat_f32_u TYPE ty_opcodei VALUE 5,
               i64_trunc_sat_f64_s TYPE ty_opcodei VALUE 6,
               i64_trunc_sat_f64_u TYPE ty_opcodei VALUE 7,
               memory_init         TYPE ty_opcodei VALUE 8,
               data_drop           TYPE ty_opcodei VALUE 9,
               memory_copy         TYPE ty_opcodei VALUE 10,
               memory_fill         TYPE ty_opcodei VALUE 11,
               table_init          TYPE ty_opcodei VALUE 12,
               elem_drop           TYPE ty_opcodei VALUE 13,
               table_copy          TYPE ty_opcodei VALUE 14,
               table_grow          TYPE ty_opcodei VALUE 15,
               table_size          TYPE ty_opcodei VALUE 16,
               table_fill          TYPE ty_opcodei VALUE 17,
             END OF c_fc_opcodes.

* FE prefixed = Threads
* status = propsal

ENDINTERFACE.
